<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.aamir</groupId>
	<artifactId>strutstospring</artifactId>
	<name>StrutstoSpring</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.6</java-version>
		<org.springframework-version>3.1.1.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>        
	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	@Autowired MainService mainService;
	@Autowired LoginService loginService;
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		 
		
		return "redirect:/login";
	}
	 
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(Locale locale, Model model,HttpServletRequest request,RedirectAttributes  redirectAttributes,BindingResult result) {
		
		
		
		LoginResponse reponse  = loginService.execute(request); 
		
				
		if(reponse.isValidate()){
			redirectAttributes.addFlashAttribute("success","Login SucessFul");
			return "mainPage";
			
		}else{
			redirectAttributes.addFlashAttribute("error",reponse.getActionMessage().getMessage());
			return "loginStatus";
			
		}	
	}
	
	
	
	
}















@Service
public class LoginService{
	
	private static final Logger logger = LoggerFactory.getLogger(LoginService.class);
	@Autowired RLRunMgmtService mgmtService;
	
	 
	
	public LoginResponse execute(HttpServletRequest request){
		
		
		Enumeration enums =  request.getAttributeNames();
		LoginResponse response = new LoginResponse();
		
		try{
		
				while (enums.hasMoreElements()) {
						String attrName = (String) enums.nextElement();
						String attrValue = (String) enums.nextElement();
					    System.out.println(attrName +" = "+ attrValue);
				}
				
				HttpSession session  = request.getSession();
				System.out.println("[LoginAction] printing all -session- attributes");
				
				if(session != null){
					Enumeration emmssn  = session.getAttributeNames();
					while (emmssn.hasMoreElements()) {
						String  attrName = (String) emmssn.nextElement();
						String  attrValue = (String) emmssn.nextElement();
						System.out.println(attrName+" = "+attrValue);
					 }
				}else{
						logger.error("[LoginAction] (Error) No current session found !");
						response.setValidate(false);
						response.setGlobalMessage(ActionError.GLOBAL_MESSAGE);
						response.setActionMessage(new MessageProperties("error.session"));
				}
				
				String user = ESSOUtil.getUid(session);
				if(RollupUtils.isEmpty(user)){
					response.setValidate(false);
					response.setGlobalMessage(ActionError.GLOBAL_MESSAGE);
					response.setActionMessage(new MessageProperties("error.empty.credential"));
				}else{
					 UserRole userRole = mgmtService.getUserRole(user);
					 
					 if(userRole != null){
						 logger.info("Authorized user: "+user+"/"+userRole.getUserAccessRole());
						 session.setAttribute(UIConstants.KEY_USER, user);
						 session.setAttribute(UIConstants.KEY_USER_ROLE, userRole.getUserAccessRole());
						 
					 }else{
						    logger.error("Unauthorized user: "+user);
						    response.setValidate(false);
							response.setGlobalMessage(ActionError.GLOBAL_MESSAGE);
							response.setActionMessage(new MessageProperties("error.user.unotherized"));
					 }
				}
			 
				logger.debug("Login Successful");
				response.setValidate(true);
		}catch(Exception anyExp){
			response.setValidate(false);
			response.setGlobalMessage(ActionError.GLOBAL_MESSAGE);
			response.setActionMessage(new MessageProperties("error.server.problem"));
		}
		return response;
	}
	

}





public class LoginResponse {

	private String globalMessage;
	private MessageProperties actionMessage;
	private boolean isValidate;
	public String getGlobalMessage() {
		return globalMessage;
	}
	public void setGlobalMessage(String globalMessage) {
		this.globalMessage = globalMessage;
	}
	public MessageProperties getActionMessage() {
		return actionMessage;
	}
	public void setActionMessage(MessageProperties actionMessage) {
		this.actionMessage = actionMessage;
	}
	public boolean isValidate() {
		return isValidate;
	}
	public void setValidate(boolean isValidate) {
		this.isValidate = isValidate;
	}
	
	
	@Override
	public String toString() {
		return "LoginResponse [globalMessage=" + globalMessage + ", actionMessage=" + actionMessage + ", isValidate="
				+ isValidate + "]";
	}	
	
}




public class LoginActionForm {
	
	private String user;
	private String passwd;
	
	public String getUser() {
		return user;
	}
	public void setUser(String user) {
		this.user = user;
	}
	
	public String getPasswd() {
		return passwd;
	}
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	
	@Override
	public String toString() {
		return "LoginActionForm [user=" + user + ", passwd=" + passwd + "]";
	}
	
}

